"""
Title       : Report Plotting Script
File        : plot_reports.py
Date        : 2025-06-04
Author      : Erick Andres Obregon Fonseca
Email       : erickof@ieee.org/erickof@estudiantec.cr
Description : Reads report_summary.csv and generates comparative plots of
              area, delay, and total power per adder and bit width.
License     : MIT.

This script reads the consolidated CSV report (generated by
collect_reports.py), and produces plots for each metric across different adder
architectures and bit-widths.

Output
------
- Plots are saved in PNG format under the 'plots/' directory by default.
- One file per metric (e.g., area_um^2.png, delay_ns.png, total_power_uW.png).
"""
import matplotlib.pyplot as plt
import os
import pandas as pd

from typing import List


def plot_metric(df: pd.DataFrame, metric: str, output_dir: str = ".") -> None:
    """
    Plot a given metric across all adders, grouped by bit width.

    Parameters
    ----------
    df : pd.DataFrame
        DataFrame containing design results (must include columns
        'adder', 'bits', and the specified metric).
    metric : str
        Metric to plot (e.g., 'area (um^2)', 'delay (ns)', 'total power (uW)').
    output_dir : str, optional
        Directory where plots will be saved. Defaults to current directory.

    Notes
    -----
    - Each adder type is plotted as a line across bit widths.
    - Output filename is derived from the metric name, sanitized for filesystem.
    """
    plt.figure(figsize=(8, 5))

    for adder in df["adder"].unique():
        subset: pd.DataFrame = df[df["adder"] == adder]
        plt.plot(subset["bits"], subset[metric], marker="o", label=adder)

    plt.title(f"{metric} vs Bit Width")
    plt.xlabel("Bit Width")
    plt.ylabel(metric)
    plt.grid(True)
    plt.legend()
    plt.tight_layout()

    # Create a filename-safe version of metric (remove spaces and parentheses)
    filename: str = (
        f'{metric.replace(" ", "_").replace("(", "").replace(")", "")}.png'
    )
    filepath: str = os.path.join(output_dir, filename)

    plt.savefig(filepath)
    print(f"[INFO] Saved plot: {filepath}")
    plt.close()


def main() -> None:
    """
    Main entry point for the plotting script.

    - Reads the CSV summary file 'report_summary.csv'.
    - Ensures output directory 'plots/' exists.
    - Iterates through a list of known metrics and generates plots if they are
      present in the DataFrame.

    Notes
    -----
    Requires the file 'report_summary.csv' to be present in the working
    directory (generated by collect_reports.py).
    """
    input_csv: str = "report_summary.csv"
    output_dir: str = "plots"

    os.makedirs(output_dir, exist_ok=True)

    df: pd.DataFrame = pd.read_csv(input_csv)

    metrics_to_plot: List[str] = [
        "area (um^2)",
        "delay (ns)",
        "internal power (uW)",
        "switching power (uW)",
        "leakage power (uW)",
        "total power (uW)",
    ]

    for metric in metrics_to_plot:
        if metric in df.columns:
            plot_metric(df, metric, output_dir)


if __name__ == "__main__":
    main()
